{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class RecursaoAlgoritmosRecursivosComponent {\n  constructor() {\n    /* https://www.ime.usp.br/~pf/algoritmos/aulas/recu.html */\n    /*Definindo um vetor*/\n    this.vetor = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    this.vetor1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n    /*Definindo o tamanho do vetor*/\n    this.n = 7;\n    this.n1 = 10;\n  }\n  ngOnInit() {}\n}\nRecursaoAlgoritmosRecursivosComponent.ɵfac = function RecursaoAlgoritmosRecursivosComponent_Factory(t) {\n  return new (t || RecursaoAlgoritmosRecursivosComponent)();\n};\nRecursaoAlgoritmosRecursivosComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RecursaoAlgoritmosRecursivosComponent,\n  selectors: [[\"app-recursao-algoritmos-recursivos\"]],\n  decls: 63,\n  vars: 3,\n  consts: [[1, \"max-width-card\"], [1, \"card-algoritmo-recursao\"], [1, \"card\"], [1, \"card-header\"], [1, \"card-title\"], [1, \"card-body\"], [1, \"card-text\"], [1, \"card-algoritmo-recursao2\"], [1, \"card-algoritmo-recursao3\"], [1, \"card\", \"card-result\"], [1, \"color-number\"]],\n  template: function RecursaoAlgoritmosRecursivosComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtext(0, \"<<<<<<< HEAD\\n\");\n      i0.ɵɵelementStart(1, \"p\");\n      i0.ɵɵtext(2, \"recursao-algoritmos-recursivos works!\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(3, \" =======\\n\");\n      i0.ɵɵelementStart(4, \"div\", 0)(5, \"h4\");\n      i0.ɵɵtext(6, \"Estudo de recurs\\u00E3o com algoritmos\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\", 1)(8, \"div\", 2)(9, \"div\", 3)(10, \"h5\", 4);\n      i0.ɵɵtext(11, \"O que \\u00E9 um Algoritmo de recurs\\u00E3o?\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(12, \"div\", 5)(13, \"p\", 6);\n      i0.ɵɵtext(14, \" Muitos problemas computacionais t\\u00EAm a seguinte propriedade: cada inst\\u00E2ncia do problema cont\\u00E9m uma inst\\u00E2ncia menor do mesmo problema. Dizemos que esses problemas t\\u00EAm estrutura recursiva. Para resolver uma inst\\u00E2ncia de um problema desse tipo, podemos aplicar o seguinte m\\u00E9todo: \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(15, \"div\")(16, \"ul\")(17, \"li\");\n      i0.ɵɵtext(18, \" Se a inst\\u00E2ncia \\u00E9 pequena, resolva-a diretamente (caso base). \");\n      i0.ɵɵelementStart(19, \"p\");\n      i0.ɵɵtext(20, \"resolva-a diretamente (use for\\u00E7a bruta se necess\\u00E1rio);\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(21, \"li\");\n      i0.ɵɵtext(22, \" Se a inst\\u00E2ncia \\u00E9 grande, reduza-a a uma inst\\u00E2ncia menor do mesmo problema (caso recursivo). \");\n      i0.ɵɵelementStart(23, \"p\");\n      i0.ɵɵtext(24, \" reduza-a a uma inst\\u00E2ncia menor do mesmo problema, aplique o m\\u00E9todo \\u00E0 inst\\u00E2ncia menor, volte \\u00E0 inst\\u00E2ncia original. \");\n      i0.ɵɵelementEnd()()()()()();\n      i0.ɵɵelement(25, \"br\");\n      i0.ɵɵelementStart(26, \"div\", 7)(27, \"div\", 2)(28, \"div\", 3)(29, \"h5\", 4);\n      i0.ɵɵtext(30, \"Exemplo de algoritmo de recurs\\u00E3o\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(31, \"div\", 5)(32, \"p\", 6);\n      i0.ɵɵtext(33, \" Um exemplo de algoritmo recursivo \\u00E9 o c\\u00E1lculo do fatorial de um n\\u00FAmero. O fatorial de um n\\u00FAmero n \\u00E9 o produto de todos os n\\u00FAmeros inteiros positivos menores ou iguais a n. O fatorial de n \\u00E9 denotado por n!. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(34, \"div\")(35, \"ul\")(36, \"li\");\n      i0.ɵɵtext(37, \"Se n = 0, ent\\u00E3o n! = 1.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(38, \"li\");\n      i0.ɵɵtext(39, \"Se n > 0, ent\\u00E3o n! = n * (n-1)!.\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(40, \"p\", 6);\n      i0.ɵɵtext(41, \" Para ilustrar o conceito de algoritmo recursivo, considere o seguinte problema: Encontrar o valor de um elemento m\\u00E1ximo de um vetor v[0..n-1]. (O problema j\\u00E1 foi mencionado num dos exerc\\u00EDcios na p\\u00E1gina Vetores.) Observe que o problema s\\u00F3 faz sentido se o vetor n\\u00E3o \\u00E9 vazio, ou seja, se n \\u2265 1. Eis uma fun\\u00E7\\u00E3o recursiva que resolve o problema: \");\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelement(42, \"br\");\n      i0.ɵɵelementStart(43, \"div\", 8)(44, \"div\", 9)(45, \"div\")(46, \"p\");\n      i0.ɵɵtext(47, \"Resultado: maiorElementoDentroDeUmVetor()\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(48, \"p\", 10);\n      i0.ɵɵtext(49);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(50, \"div\", 9)(51, \"div\")(52, \"p\");\n      i0.ɵɵtext(53, \"Resultado: maiorElementoDentroDeUmVetor()\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(54, \"p\", 10);\n      i0.ɵɵtext(55);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(56, \"div\", 9)(57, \"div\")(58, \"p\");\n      i0.ɵɵtext(59, \"Resultado: maiorElementoDentroDeUmVetor()\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(60, \"p\", 10);\n      i0.ɵɵtext(61);\n      i0.ɵɵelementEnd()()()()();\n      i0.ɵɵtext(62, \"\\n>>>>>>> AnalisesDeCodigoBackEnd\\n\");\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(49);\n      i0.ɵɵtextInterpolate(ctx.maiorElementoDentroDeUmVetor(ctx.vetor, ctx.n));\n      i0.ɵɵadvance(6);\n      i0.ɵɵtextInterpolate1(\" \", ctx.maiorElementoDentroDeUmVetor(ctx.vetor1, ctx.n1), \" \");\n      i0.ɵɵadvance(6);\n      i0.ɵɵtextInterpolate1(\" \", ctx.funcaoEncontraValorElementoMaximo(ctx.fEVEMaximo, ctx.fEVEMaximoVetor), \" \");\n    }\n  },\n  styles: [\"var[_ngcontent-%COMP%]   resource[_ngcontent-%COMP%];\\n (()[_ngcontent-%COMP%]   =[_ngcontent-%COMP%] >  { // webpackBootstrap\\n \\tvar __webpack_modules__ = ({\\n\\n 479:\\n\\n (() => {\\n\\nthrow new Error(\\\"Module build failed (from ./node_modules/sass-loader/dist/cjs.js):\\\\nSassError: expected \\\\\\\"{\\\\\\\".\\\\n   \\u2577\\\\n67 \\u2502 <<<<<<< HEAD\\\\r\\\\n   \\u2502             ^\\\\n   \\u2575\\\\n  src\\\\\\\\app\\\\\\\\recursao-algoritmos-recursivos\\\\\\\\recursao-algoritmos-recursivos\\\\\\\\recursao-algoritmos-recursivos.component.scss 67:13  root stylesheet\\\");\\n\\n })\\n\\n \\t});\\n\\n \\t\\n \\t// startup\\n \\t// Load entry module and return exports\\n \\t// This entry module doesn't tell about it's top-level declarations so it can't be inlined\\n \\tvar __webpack_exports__ = {};\\n \\t__webpack_modules__[479]();\\n \\tresource = __webpack_exports__;\\n \\t\\n })()\\n;\"]\n});","map":{"version":3,"mappings":";AAOA,OAAM,MAAOA,qCAAqC;EAUhDC;IATA;IAEA;IACA,UAAK,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;IACvC,WAAM,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAC5D;IACA,MAAC,GAAG,CAAC;IACL,OAAE,GAAG,EAAE;EAEQ;EACfC,QAAQ,IAAU;;AAXPF,qCAAqC;mBAArCA,qCAAqC;AAAA;AAArCA,qCAAqC;QAArCA,qCAAqC;EAAAG;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCPlDC,8BACA;MAAAA,yBAAG;MAAAA,qDAAqC;MAAAA,iBAAI;MAI5CA,0BACA;MAAAA,8BAA4B;MACtBA,sDAAiC;MAAAA,iBAAK;MAC1CA,8BAAqC;MAIRA,4DAAiC;MAAAA,iBAAK;MAE/DA,+BAAuB;MAEnBA,yUAKF;MAAAA,iBAAI;MAGNA,4BAAK;MAGCA,yFACA;MAAAA,0BAAG;MAAAA,iFAAsD;MAAAA,iBAAI;MAE/DA,2BAAI;MACFA,6HAEA;MAAAA,0BAAG;MACDA,kKAEF;MAAAA,iBAAI;MAMdA,sBAAM;MACNA,+BAAsC;MAITA,sDAAgC;MAAAA,iBAAK;MAE9DA,+BAAuB;MAEnBA,oQAIF;MAAAA,iBAAI;MAEJA,4BAAK;MAEGA,6CAAuB;MAAAA,iBAAK;MAChCA,2BAAI;MAAAA,sDAAgC;MAAAA,iBAAK;MAG7CA,6BAAqB;MACnBA,0ZAMF;MAAAA,iBAAI;MAIVA,sBAAM;MAENA,+BAAsC;MAG7BA,0DAAyC;MAAAA,iBAAI;MAChDA,8BAAwB;MAAAA,aAA4C;MAAAA,iBAAI;MAG5EA,+BAA8B;MAEvBA,0DAAyC;MAAAA,iBAAI;MAChDA,8BAAwB;MACtBA,aACF;MAAAA,iBAAI;MAIRA,+BAA8B;MAErBA,0DAAyC;MAAAA,iBAAI;MAChDA,8BAAwB;MACtBA,aACF;MAAAA,iBAAI;MAMdA,oDACA;;;MAxBgCA,gBAA4C;MAA5CA,wEAA4C;MAOlEA,eACF;MADEA,qFACF;MAQIA,eACF;MADEA,2GACF","names":["RecursaoAlgoritmosRecursivosComponent","constructor","ngOnInit","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["E:\\ProjetosProgramacao_2023\\ProjetoProgramacao_EstudosANGULAR\\ProjetoProgramacao_EstudosANGULAR\\algoritmos\\src\\app\\recursao-algoritmos-recursivos\\recursao-algoritmos-recursivos\\recursao-algoritmos-recursivos.component.ts","E:\\ProjetosProgramacao_2023\\ProjetoProgramacao_EstudosANGULAR\\ProjetoProgramacao_EstudosANGULAR\\algoritmos\\src\\app\\recursao-algoritmos-recursivos\\recursao-algoritmos-recursivos\\recursao-algoritmos-recursivos.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-recursao-algoritmos-recursivos',\r\n  templateUrl: './recursao-algoritmos-recursivos.component.html',\r\n  styleUrls: ['./recursao-algoritmos-recursivos.component.scss'],\r\n})\r\nexport class RecursaoAlgoritmosRecursivosComponent {\r\n  /* https://www.ime.usp.br/~pf/algoritmos/aulas/recu.html */\r\n\r\n  /*Definindo um vetor*/\r\n  vetor = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n  vetor1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\r\n  /*Definindo o tamanho do vetor*/\r\n  n = 7;\r\n  n1 = 10;\r\n\r\n  constructor() {}\r\n  ngOnInit(): void {}\r\n\r\n<<<<<<< HEAD\r\n  \r\n=======\r\n  /* 7. Critique a seguinte função recursiva que promete encontrar o valor de um elemento máximo de v[0..n-1]*/\r\n  public fEVEMaximo = 8;\r\n  public fEVEMaximoVetor = [101, 200, 33, 14, 45, 600, 732, 80];\r\n  funcaoEncontraValorElementoMaximo(n: number, vetor: number[]) {\r\n    // Se o n for == 1\r\n    if (n == 1) {\r\n      return vetor[0];\r\n    }\r\n    // Se o n for == 2\r\n    if (n == 2) {\r\n      if (vetor[0] < vetor[1]) {\r\n        return vetor[1];\r\n      } else {\r\n        return vetor[0];\r\n      }\r\n    }\r\n    let maior: number = this.funcaoEncontraValorElementoMaximo(n - 1, vetor);\r\n    if (maior < vetor[n - 1]) {\r\n      return vetor[n - 1];\r\n    } else {\r\n      return maior;\r\n    }\r\n\r\n  }\r\n\r\n  /*Definindo uma função que encontra o maior elemento dentro de um vetor*/\r\n  /* Formas diferentes de escrever uma função com recursividade */\r\n  maiorElementoDentroDeUmVetor(vetor: number[], n: number): number {\r\n    /*Caso base*/\r\n    if (n == 1) {\r\n      return vetor[0];\r\n    }\r\n\r\n    let maior = this.maiorElementoDentroDeUmVetor(vetor, n - 1);\r\n    if (maior > vetor[n - 1]) {\r\n      return maior;\r\n    } else {\r\n      return vetor[n - 1];\r\n    }\r\n\r\n    /*Chamada recursiva*/\r\n    // else{\r\n    //   return Math.max(vetor[n-1], this.maiorElementoDentroDeUmVetor(vetor, n-1));\r\n    // }\r\n  }\r\n>>>>>>> AnalisesDeCodigoBackEnd\r\n}\r\n","<<<<<<< HEAD\r\n<p>recursao-algoritmos-recursivos works!</p>\r\n\r\n\r\n\r\n=======\r\n<div class=\"max-width-card\">\r\n  <h4>Estudo de recursão com algoritmos</h4>\r\n  <div class=\"card-algoritmo-recursao\">\r\n    <!--Criando um card -  para explicar o que é um algoritmo recursivo -->\r\n    <div class=\"card\">\r\n      <div class=\"card-header\">\r\n        <h5 class=\"card-title\">O que é um Algoritmo de recursão?</h5>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <p class=\"card-text\">\r\n          Muitos problemas computacionais têm a seguinte propriedade: cada\r\n          instância do problema contém uma instância menor do mesmo problema.\r\n          Dizemos que esses problemas têm estrutura recursiva. Para resolver uma\r\n          instância de um problema desse tipo, podemos aplicar o seguinte\r\n          método:\r\n        </p>\r\n      </div>\r\n      <!--Criando lista-->\r\n      <div>\r\n        <ul>\r\n          <li>\r\n            Se a instância é pequena, resolva-a diretamente (caso base).\r\n            <p>resolva-a diretamente (use força bruta se necessário);</p>\r\n          </li>\r\n          <li>\r\n            Se a instância é grande, reduza-a a uma instância menor do mesmo\r\n            problema (caso recursivo).\r\n            <p>\r\n              reduza-a a uma instância menor do mesmo problema, aplique o método\r\n              à instância menor, volte à instância original.\r\n            </p>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <br />\r\n  <div class=\"card-algoritmo-recursao2\">\r\n    <!--Criando um card -  para explicar o que é um algoritmo recursivo -->\r\n    <div class=\"card\">\r\n      <div class=\"card-header\">\r\n        <h5 class=\"card-title\">Exemplo de algoritmo de recursão</h5>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <p class=\"card-text\">\r\n          Um exemplo de algoritmo recursivo é o cálculo do fatorial de um\r\n          número. O fatorial de um número n é o produto de todos os números\r\n          inteiros positivos menores ou iguais a n. O fatorial de n é denotado\r\n          por n!.\r\n        </p>\r\n        <!--Criando lista-->\r\n        <div>\r\n          <ul>\r\n            <li>Se n = 0, então n! = 1.</li>\r\n            <li>Se n > 0, então n! = n * (n-1)!.</li>\r\n          </ul>\r\n        </div>\r\n        <p class=\"card-text\">\r\n          Para ilustrar o conceito de algoritmo recursivo, considere o seguinte\r\n          problema: Encontrar o valor de um elemento máximo de um vetor\r\n          v[0..n-1]. (O problema já foi mencionado num dos exercícios na página\r\n          Vetores.) Observe que o problema só faz sentido se o vetor não é\r\n          vazio, ou seja, se n ≥ 1. Eis uma função recursiva que resolve o\r\n          problema:\r\n        </p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <br />\r\n\r\n  <div class=\"card-algoritmo-recursao3\">\r\n    <div class=\"card card-result\">\r\n      <div>\r\n        <p>Resultado: maiorElementoDentroDeUmVetor()</p>\r\n        <p class=\"color-number\">{{ maiorElementoDentroDeUmVetor(vetor, n) }}</p>\r\n      </div>\r\n    </div>\r\n    <div class=\"card card-result\">\r\n      <div>\r\n        <p>Resultado: maiorElementoDentroDeUmVetor()</p>\r\n        <p class=\"color-number\">\r\n          {{ maiorElementoDentroDeUmVetor(vetor1, n1) }}\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"card card-result\">\r\n        <div>\r\n          <p>Resultado: maiorElementoDentroDeUmVetor()</p>\r\n          <p class=\"color-number\">\r\n            {{ funcaoEncontraValorElementoMaximo(fEVEMaximo, fEVEMaximoVetor) }}\r\n          </p>\r\n        </div>\r\n      </div>\r\n\r\n  </div>\r\n</div>\r\n>>>>>>> AnalisesDeCodigoBackEnd\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}